/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestimonialsRouteImport } from './routes/testimonials'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FormationsIndexRouteImport } from './routes/formations/index'
import { Route as FormationsIdRouteImport } from './routes/formations/$id'

const TestimonialsRoute = TestimonialsRouteImport.update({
  id: '/testimonials',
  path: '/testimonials',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FormationsIndexRoute = FormationsIndexRouteImport.update({
  id: '/formations/',
  path: '/formations/',
  getParentRoute: () => rootRouteImport,
} as any)
const FormationsIdRoute = FormationsIdRouteImport.update({
  id: '/formations/$id',
  path: '/formations/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/testimonials': typeof TestimonialsRoute
  '/formations/$id': typeof FormationsIdRoute
  '/formations': typeof FormationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/testimonials': typeof TestimonialsRoute
  '/formations/$id': typeof FormationsIdRoute
  '/formations': typeof FormationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/testimonials': typeof TestimonialsRoute
  '/formations/$id': typeof FormationsIdRoute
  '/formations/': typeof FormationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/login'
    | '/testimonials'
    | '/formations/$id'
    | '/formations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/login'
    | '/testimonials'
    | '/formations/$id'
    | '/formations'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/login'
    | '/testimonials'
    | '/formations/$id'
    | '/formations/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  LoginRoute: typeof LoginRoute
  TestimonialsRoute: typeof TestimonialsRoute
  FormationsIdRoute: typeof FormationsIdRoute
  FormationsIndexRoute: typeof FormationsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/testimonials': {
      id: '/testimonials'
      path: '/testimonials'
      fullPath: '/testimonials'
      preLoaderRoute: typeof TestimonialsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/formations/': {
      id: '/formations/'
      path: '/formations'
      fullPath: '/formations'
      preLoaderRoute: typeof FormationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/formations/$id': {
      id: '/formations/$id'
      path: '/formations/$id'
      fullPath: '/formations/$id'
      preLoaderRoute: typeof FormationsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  LoginRoute: LoginRoute,
  TestimonialsRoute: TestimonialsRoute,
  FormationsIdRoute: FormationsIdRoute,
  FormationsIndexRoute: FormationsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
